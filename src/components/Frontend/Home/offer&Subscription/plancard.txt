import DoneOutlineIcon from "@mui/icons-material/DoneOutline";
import { Box, Button, Card, CardContent, CardHeader, CircularProgress, Typography } from "@mui/material";
import React from "react";
import { useDispatch, useSelector } from "react-redux";
import { useNavigate } from "react-router-dom";

import { setPath } from "../../../../redux/slice/PathSlice";

function SubscriptionPlanCard(props) {
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const { planFrontendStatus, planFrontend, planType } = props;
  const { country } = useSelector((state) => state.user);
  const cardStyle = {
    position: "relative",
    width: {
      xs: "17rem",
      sm: "18rem",
      md: "19rem",
      lg: "20.5rem",
      xl: "22rem",
    },
    height: {
      xs: "37rem",
      sm: "38rem",
      md: "40rem",
      lg: "45rem",
    },
    margin: {
      sm: "5px auto",
      xs: "10px auto",
      md: "16px auto",
    },

    backgroundColor: "#fff",
    borderRadius: "0.5rem",

    textAlign: "center",
    boxShadow: "0 0 10px  rgba(0,0,0,0.4)",
  };

  const cardHeader = {
    backgroundColor: "#041E42",
    fontSize: {
      xs: "16px",
      sm: "17px",
      md: "1.6rem",
      lg: "2rem",
    },
    color: "#fff",
    borderRadius: "0.5rem 0.5rem 0 0",
  };

  const costStyle = {
    // fontSize: {
    //   xs: "16px",
    //   sm: "18px",
    //   md: "1.5rem",
    // },
    fontWeight: 600,
    color: "red",
    marginBottom: "1rem",
  };
  const subscribeBtn = {
    position: "absolute",
    bottom: 10,
    left: "25%",
    width: "10rem",
    color: "red",
    "&:hover": {
      color: "white",
      backgroundColor: "red",
    },
    "&:active": {
      color: "white",
      backgroundColor: "black",
    },
  };

  const TextLine = (props) => {
    return (
      <Box sx={{ display: "flex", mb: "1rem" }}>
        <DoneOutlineIcon sx={{ mr: 1 }}></DoneOutlineIcon>
        <Typography
          sx={{
            textAlign: "left",
            fontSize: {
              xs: "0.7rem",
              sm: "0.7rem",
              md: "0.8rem",
              lg: "1rem",
            },
            fontWeight: "500",
          }}
        >
          {props.children}
        </Typography>
      </Box>
    );
  };
  const clickBuyHandler = (plan) => {
    dispatch(setPath());
    navigate("/subscription/form", {
      state: {
        plan: plan,
      },
    });
  };
  return (
    <>
      {planFrontendStatus === "succeeded" &&
      planFrontend !== "" &&
      planFrontend !== undefined ? (
        <Box
          sx={{
            display: "flex",
            flexDirection: {
              xs: "column",
              md: "row",
            },
            justifyContent: "space-around",
            alignItems: "center",
          }}
        >
          {planFrontend.map((s, index) => (
            <Box
              key={index}
              sx={{
                mb: 2,
                py: 2,

                // width: { sm: "100%", md: "30%", lg: "30%", xl: "30%" },
              }}
            >
              <Card sx={{ ...cardStyle }}>
                <CardHeader
                  title={
                    <Typography
                      variant="h4"
                      sx={{
                        ...cardHeader,
                        fontSize: {
                          xs: "16px",
                          sm: "17px",
                          md: "1.6rem",
                          lg: "1.6rem",
                        },
                      }}
                    >
                      {s.name}
                    </Typography>
                  }
                  sx={{
                    ...cardHeader,
                  }}
                />

                <CardContent>
                  {/* 100$ / 1month */}
                  {s?.discount_status === 1 ? (
                    <>
                      <Typography
                        variant="h5"
                        component="h5"
                        sx={{ ...costStyle }}
                      >
                        <span style={{ textDecoration: "line-through" }}>
                          {country !== "Myanmar"
                            ? s.oversea_fees + " AUD"
                            : s.fees + "  MMK"}
                        </span>
                        <br />
                        {country !== "Myanmar"
                          ? s.oversea_fees -
                            (s.oversea_fees * s.discount_percent) / 100 +
                            " AUD"
                          : s.fees -
                            (s.fees * s.discount_percent) / 100 +
                            "  MMK"}
                      </Typography>
                    </>
                  ) : country !== "Myanmar" ? (
                    s.oversea_fees + " AUD"
                  ) : (
                    s.fees + "  MMK"
                  )}
                  {planType === 1 && (
                    <>
                      <TextLine>
                        {s.limited_status === 1 ? (
                          <span style={{ color: "red" }}>unlimited </span>
                        ) : (
                          <span style={{ color: "red" }}>limited </span>
                        )}{" "}
                        practice
                        {s.limited_status === 1 ? (
                          <span>for {s.number_of_day} days</span>
                        ) : (
                          "with " + s.scoring_count + " scoring count"
                        )}
                      </TextLine>
                      <TextLine>
                        AI Scoring System based on{" "}
                        <span style={{ color: "red" }}> real-world </span>test
                        questions
                      </TextLine>
                      <TextLine>Practice Resource</TextLine>
                      {JSON.parse(s.description).map((d, index) => (
                        <TextLine key={index}>{d}</TextLine>
                      ))}
                    </>
                  )}
                  {planType === 2 && (
                    <>
                      <TextLine>
                        {s.mocktest_count} Ai Scoring Mock test based on
                        <span style={{ color: "red" }}> real-world </span>test
                        questions
                      </TextLine>
                      <TextLine>Practice Resource</TextLine>
                      <TextLine>Score Card within taken days</TextLine>
                      {typeof s.description === "string" &&
                      s.description.includes("[") ? (
                        JSON.parse(s.description).map((d, index) => (
                          <TextLine key={index}>{d}</TextLine>
                        ))
                      ) : (
                        <TextLine>{s.description}</TextLine>
                      )}
                    </>
                  )}
                  {planType === 5 && (
                    <>
                      <TextLine>
                        {s.limited_status === 1 ? (
                          <span style={{ color: "red" }}>unlimited </span>
                        ) : (
                          <span style={{ color: "red" }}>limited </span>
                        )}{" "}
                        practice
                        {s.limited_status === 1 ? (
                          <span>for {s.number_of_day} days</span>
                        ) : (
                          "with " + s.scoring_count + " scoring count"
                        )}
                      </TextLine>
                      <TextLine>
                        {s.mocktest_count} Ai Scoring Mock test based on
                        <span style={{ color: "red" }}> real-world </span>test
                        questions
                      </TextLine>
                      <TextLine>Practice Resource</TextLine>
                      <TextLine>Score Card within taken days</TextLine>
                      {typeof s.description === "string" &&
                      s.description.includes("[") ? (
                        JSON.parse(s.description).map((d, index) => (
                          <TextLine key={index}>{d}</TextLine>
                        ))
                      ) : (
                        <TextLine>{s.description}</TextLine>
                      )}
                    </>
                  )}
                  {planType === 4 && (
                    <>
                      <TextLine>
                        {JSON.parse(s.language_type_id).map((l, index) => (
                          <Typography key={index}>
                            {" "}
                            {l === 1
                              ? "Speaking Mock Test +" +
                                JSON.parse(s.sectional_mocktest_count)[index]
                              : l === 2
                              ? "Reading Mock Test +" +
                                JSON.parse(s.sectional_mocktest_count)[index]
                              : l === 4
                              ? "Writing Mock Test +" +
                                JSON.parse(s.sectional_mocktest_count)[index]
                              : l === 3
                              ? "Listeninng MockTest +" +
                                JSON.parse(s.sectional_mocktest_count)[index]
                              : ""}
                          </Typography>
                        ))}
                      </TextLine>
                      <TextLine>Practice Resource</TextLine>
                      <TextLine>Score Card within taken days</TextLine>
                      {typeof s.description === "string" &&
                      s.description.includes("[") ? (
                        JSON.parse(s.description).map((d, index) => (
                          <TextLine key={index}>{d}</TextLine>
                        ))
                      ) : (
                        <TextLine>{s.description}</TextLine>
                      )}
                    </>
                  )}
                  {planType === 8 && (
                    <>
                      <TextLine>
                        {s.limited_status === 1 ? (
                          <span style={{ color: "red" }}>unlimited </span>
                        ) : (
                          <span style={{ color: "red" }}>limited </span>
                        )}{" "}
                        practice
                        {s.limited_status === 1 ? (
                          <span>for {s.number_of_day} days</span>
                        ) : (
                          "with " + s.scoring_count + " scoring count"
                        )}
                      </TextLine>
                      <TextLine>
                        {s.mocktest_count} Ai Scoring Mock test based on
                        <span style={{ color: "red" }}> real-world </span>test
                        questions
                      </TextLine>
                      <TextLine>
                        {JSON.parse(s.language_type_id).map((l, index) => (
                          <Typography key={index}>
                            {" "}
                            {l === 1
                              ? "Speaking Mock Test +" +
                                JSON.parse(s.sectional_mocktest_count)[index]
                              : l === 2
                              ? "Reading Mock Test +" +
                                JSON.parse(s.sectional_mocktest_count)[index]
                              : l === 4
                              ? "Writing Mock Test +" +
                                JSON.parse(s.sectional_mocktest_count)[index]
                              : l === 3
                              ? "Listeninng MockTest +" +
                                JSON.parse(s.sectional_mocktest_count)[index]
                              : ""}
                          </Typography>
                        ))}
                      </TextLine>
                      <TextLine>Practice Resource</TextLine>
                      <TextLine>Score Card within taken days</TextLine>
                      {typeof s.description === "string" &&
                      s.description.includes("[") ? (
                        JSON.parse(s.description).map((d, index) => (
                          <TextLine key={index}>{d}</TextLine>
                        ))
                      ) : (
                        <TextLine>{s.description}</TextLine>
                      )}
                    </>
                  )}

                  <Button
                    variant="outlined"
                    sx={{ ...subscribeBtn }}
                    onClick={() => clickBuyHandler(s)}
                  >
                    SUBSCRIBE
                  </Button>
                </CardContent>
              </Card>
            </Box>
          ))}
        </Box>
      ) : (
        <Box sx={{ display: "flex", width: "100%", height: "70vh" }}>
          <CircularProgress sx={{ m: "auto" }}></CircularProgress>
        </Box>
      )}
      {planFrontendStatus === "failed" && (
        <Typography textAlign="center">
          Failed .Please check your network & try reload
        </Typography>
      )}
      {planFrontendStatus === "succeeded" && planFrontend.length === 0 && (
        <Box
          sx={{
            height: "60vh",
            mt: 3,
            display: "flex",
            justifyContent: "center",
            alignItems: "center",
          }}
        >
          <Box>
            <lord-icon
              src="https://cdn.lordicon.com/pqxdilfs.json"
              trigger="hover"
              colors="outline:#131432,primary:#606874,secondary:#110a5c,tertiary:#ebe6ef"
              style={{ width: "250px", height: "250px" }}
            ></lord-icon>
            <Box>
              <Typography
                textAlign="center"
                variant="h5"
                sx={{ height: "20vh" }}
              >
                Coming soon
              </Typography>
            </Box>
          </Box>
        </Box>
      )}
    </>
  );
}

export default SubscriptionPlanCard;



 