import { DndContext, KeyboardSensor, MouseSensor, TouchSensor, useSensor, useSensors } from "@dnd-kit/core";
import { Box, Button, Typography } from "@mui/material";
import React, { useState } from "react";
import { useEffect } from "react";

import { Draggable } from "./Draggable";
import { Droppable } from "./Droppable";
import { updateUserData } from "../StoreDataFunctions";

function RFIBtest(props) {
  const {
    category,
    testPost,
    setCategoryState,
    setCurrentPage,
    setCurrentCategory,
    setCurrentIndex,
    passSaveDataState,
    setPassSaveDataState,
    setCurrentQuestionStart
  } = props;
  const [countTotalAnswerState, setCountTotalAnswerState] = useState(true);
  const mouseSensor = useSensor(MouseSensor);
  const touchSensor = useSensor(TouchSensor);
  const keyboardSensor = useSensor(KeyboardSensor);
  const sensors = useSensors(mouseSensor, touchSensor, keyboardSensor);
  const [index, setIndex] = useState(0);

  const [storeData, setStoreData] = useState();
  const [checkArray, setCheckArray] = useState([]);
  const [dropArray, setDropArray] = useState([]);
  const [dragArray, setDragArray] = useState([]);
  let [content, setContent] = useState("");
  const [count, setCount] = useState(0);
  const [ans, setAns] = useState();
  const [minusCount, setMinusCount] = useState(0);
  const [answer, setAnswer] = useState();
  const [totalCount, setTotalCount] = useState(0);

  useEffect(() => {
    if(passSaveDataState){
      let saveCategory=localStorage.getItem("saveCategory");
      let saveIndex=localStorage.getItem("saveIndex");
      
      if(saveCategory == category){
        setIndex(parseInt(saveIndex));
        setCurrentIndex(saveIndex);
      
        setPassSaveDataState(false);
        setTimeout(() => {
          localStorage.removeItem("saveCategory");
          localStorage.removeItem("saveIndex");
          
        }, 2500);

      }else{
        setCategoryState(false);
      }   
     }
    setCurrentIndex(index);
    
    ;
    
  }, [index, setCurrentIndex,setPassSaveDataState,passSaveDataState,category,setCategoryState]);

  //get set data from local storage and set current state
  useEffect(() => {
    let getStoreData = JSON.parse(localStorage.getItem(category));
     
    getStoreData.score = getStoreData.score.split(",");
    getStoreData.answer = JSON.parse(getStoreData.answer);
  
    setStoreData(getStoreData);
    setCurrentCategory(category);
  }, [category, setCurrentCategory]);
  function handleDragEnd({ active, over }) {
    //s for start and e for end
     //update with save progress data
    
  
    let sid = over === null ? null : over.id;
    let eid = active.id;

    let exist = sid !== null ? sid.toString().indexOf("drag") : "";
    let existArr = eid !== null ? dropArray.includes(eid) : "";

    if (sid !== null && exist === -1 && !existArr) {
  
      dropArray.splice(sid, 1, eid);
    }
    if (sid === null && existArr) {
      
      let s = dropArray.indexOf(eid);
      dropArray.splice(s, 1, 0);
      
    }
    if (sid !== null && existArr) {
    
      let s = dropArray.indexOf(eid);
      dropArray.splice(s, 1, dropArray[sid]);
      dropArray.splice(sid, 1, eid);
    }
  }
  
  const clickHandler = () => {
    setCount(0);
    setTotalCount(0);
    checkArray.forEach((c, index) => {
      if (c !== "" && c === dropArray[index]) {
        setCount((prev) => prev + 1);
      }
      if (c !== "") {
        setTotalCount((prev) => prev + 1);
      }
    });

    setAnswer(true);
  };

  // calculate
  useEffect(() => {
    if (answer) {
      let overall_point = count;
      // let totalPoint = totalCount;

      
    
      //for user answers
      storeData.score[index]=(overall_point < 0 ? 0 : overall_point);
      storeData.answer[index]=dropArray;
   
      setStoreData(storeData);
      //update the data in local storage
      updateUserData("Reading", category, storeData);   
      

      if (index === testPost.length - 1) {
        

        setCurrentPage((prev) => prev + 1);
        setCategoryState(false);
      } else {
        setIndex((prev) => prev + 1);
        setCurrentPage((prev) => prev + 1);
        reset();
      }
      setCurrentQuestionStart(true);
    }
  }, [
    ans,
    answer,
    count,
    setCurrentQuestionStart,
    category,
    setCategoryState,
    setCurrentPage,
    index,
    minusCount,
    testPost,
    storeData,
    totalCount,
    checkArray,
    dropArray,
  ]);

  const reset = () => {
    setCount(0);
    setAns("");
    setMinusCount(0);
    setAnswer(false);
    setTotalCount(0);
  };

  //count  total number of true answer in each post will only run once
  useEffect(() => {
    if (countTotalAnswerState) {
      props.rfibPost.forEach((p, i) => {
        let correctCount = 0;
        p?.answers.forEach((c) => {
          if (c.is_correct == 1) {
            correctCount += 1;
            
          }
        });
        storeData.totalPoint[i] = correctCount;
        setStoreData(storeData);
      });
      
      setCountTotalAnswerState(false);
    }
  }, [countTotalAnswerState, props.rfibPost, storeData]);

  useEffect(() => {
    // if (props.rfibPost[index].answer !== undefined) {
    setDragArray([]);
    setCheckArray([]);
    testPost[index].answers.forEach((ans) => {
      setCheckArray((prev) => [
        ...prev,
        ans.is_correct === "1" ? ans.name : "",
      ]);

      setDragArray((prev) =>
        [...prev, ans.name]
          .map((value) => ({ value, sort: Math.random() }))
          .sort((a, b) => a.sort - b.sort)
          .map(({ value }) => value)
      );
    });

    setDropArray(new Array(testPost[index].answers.length - 1).fill(0));
    setContent(testPost[index].content.split("#"));
  }, [index, testPost]);

  return (
    <>
      <Box
        sx={{
          mt: "5rem",
          px: {
            xs: 2,
            sm: 5,
            md: 10,
            lg: "10rem",
            xl: "20rem",
          },
        }}
      >
        <Box
          sx={{
            backgroundColor: "white",
            borderRadius: "2rem",
            p: 2,
            boxShadow: 5,
          }}
        >
          <Box sx={{ width: "100%" }}>
            <Typography variant="body5">
              In the texts below some words are missing.Drag word from the box
              below to the appropriate place in the text.To undo an answer
              choice,drag the word back to the box below to the text.
            </Typography>
          </Box>

          <Box sx={{ margin: "0 auto", width: "100%", mb: 4 }}>
            <Box sx={{ margin: "0 auto", width: "100%", py: 2 }}>
              <Box
                sx={{
                  width: "100%",
                  margin: "0 auto",

                  borderRadius: "0.5rem",
                  padding: 1,
                  boxShadow: 1,
                }}
              >
                
                <DndContext onDragEnd={handleDragEnd} sensors={sensors}>
                  {content !== undefined &&
                    content !== "" &&
                    dropArray.length !== 0 && (
                      <>
                        <Box
                          sx={{
                            width: "90%",
                            margin: "0 auto",
                            textAlign: "justify",
                            borderRadius: "0.5rem",
                            lineHeight: "220%",
                            padding: 1,
                            boxShadow: 1,
                          }}
                        >
                          {content.map((c, index) => (
                            <span key={index}>
                              <Typography
                                variant="body5"
                                sx={{
                                  my: 2,
                                  fontSize: "1rem",
                                  lineHeight: "150%",
                                }}
                              >
                                {c}
                              </Typography>
                              {index !== content.length - 1 && (
                                <span>
                                  <Droppable
                                    id={index}
                                    index={index}
                                    key={index}
                                    className={
                                      answer
                                        ? checkArray[index] !== "" &&
                                          dropArray[index] === checkArray[index]
                                          ? "drop correct"
                                          : "drop false"
                                        : "drop"
                                    }
                                  >
                                    {dropArray[index] !== 0 ? (
                                      <Draggable
                                        id={dropArray[index]}
                                        className="inDrop"
                                      >
                                        {dropArray[index]}
                                      </Draggable>
                                    ) : (
                                      "Drop here"
                                    )}
                                  </Droppable>
                                </span>
                              )}
                              {/* {answer && checkArray[index] !== "" && (
                              <Typography
                                variant="span"
                                sx={{
                                  color: "yellowgreen",
                                  fontSize: "1.2rem",
                                }}
                              >
                                ({checkArray[index]})
                              </Typography>
                            )} */}
                            </span>
                          ))}
                        </Box>
                        <Box
                          sx={{
                            width: "90%",
                            margin: "0 auto",

                            borderRadius: "0.5rem",
                            padding: 1,
                            boxShadow: 5,
                          }}
                        >
                          {dragArray.map(
                            (d, index) =>
                              !dropArray.includes(d) && (
                                <Draggable id={d} index={index} key={index}>
                                  {d}
                                </Draggable>
                              )
                          )}
                        </Box>
                      </>
                    )}
                </DndContext>
              </Box>
            </Box>
          </Box>
        </Box>
      </Box>
      <Box
        sx={{
          width: "100%",
          display: "flex",
          mt: 5,
          pb: 2,
          justifyContent: "flex-end",
        }}
      >
        <Button
          variant="contained"
          sx={{ mr: "1rem", mb: "1rem" }}
          onClick={clickHandler}
        >
          Next
        </Button>
      </Box>
    </>
  );
}

export default RFIBtest;
