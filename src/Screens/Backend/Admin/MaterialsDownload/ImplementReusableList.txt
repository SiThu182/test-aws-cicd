import DeleteIcon from "@mui/icons-material/Delete";
import SaveAsIcon from "@mui/icons-material/SaveAs";
import {
  Box,
  Button,
  CircularProgress,
  Pagination,
  Typography,
} from "@mui/material";
import TableCell from "@mui/material/TableCell";
import TableRow from "@mui/material/TableRow";
import axios from "axios";
import React, { useEffect } from "react";
import { useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { Link, useNavigate } from "react-router-dom";
import swal from "sweetalert";

import ReadOnlyQuill from "../../../../components/Backend/Admin/Posts/ReadOnlyQuill";
import TableForm from "../../../../components/Backend/TableForm/TableForm";

import { FetchBlogAsync } from "../../../../redux/thunk/Blog";
import ReusableList from "../ReusableList";

function MaterialDownloadList() {
  const navigate = useNavigate();
  const { blogList, blogListStatus, blogListError } = useSelector(
    (state) => state.blog
  );
  const [postHtmlTable, setPostHtmlTable] = useState();

  const backendURL = "url";
 

  const deletePost = async (id) => {
    const btn = document.getElementById(id);

    btn.innerText = "Deleting...";
    let token = await getCookie("userToken");
    if (!token) navigate("/login");
    else {
      let config = { headers: { Authorization: "Bearer " + token } };
      const res = await axios.delete(`${backendURL}/${id}`, config);
      if (res.data.status) {
        btn.innerText = "Delete";
        //
        swal({
          title: "Success",
          text: res.data.message,
          icon: "success",
          button: "OK!",
          timer: 1500,
        });
        btn.closest("tr").style.display = "none";
      }
    }
  };

  useEffect(() => {
    const ellipsisStyle = {
      whiteSpace: "nowrap",
      textOverflow: "ellipsis",
      overflow: "hidden",
      width: "350px",
      maxWidth: "350px",
    };

    if (blogListStatus === "loading") {
      setPostHtmlTable(
        <TableRow>
          <TableCell colSpan="12">
            <Box
              sx={{
                textAlign: "center",
                width: "100%",
                height: "60vh",
                py: "20vh",
              }}
            >
              <CircularProgress />
            </Box>
          </TableCell>
        </TableRow>
      );
    }

    if (blogListStatus === "failed") {
      setPostHtmlTable(
        <TableRow>
          <TableCell colSpan="12" height="60vh">
            <Typography
              variant="h5"
              textAlign="center"
              sx={{ py: "20vh", color: "red" }}
            >
              Fail to fetch data
            </Typography>
          </TableCell>
        </TableRow>
      );
    } else {
      if (blogList.data !== undefined) {
        setPostHtmlTable(
          blogList.data.map((item, index) => {
            return (
              <TableRow
                id={item.id}
                key={index}
                sx={{
                  "&:last-child td, &:last-child th": { border: 0 },
                  height: "20%",
                  overflow: "hidden",
                }}
                height={"60px"}
              >
                <TableCell
                  sx={{ ...ellipsisStyle, width: "10%", textAlign: "center" }}
                >
                  {item.name}
                </TableCell>
                <TableCell
                  sx={{ ...ellipsisStyle, width: "10%", textAlign: "center" }}
                >
                  {item.title}
                </TableCell>
                <TableCell
                  sx={{ ...ellipsisStyle, width: "20%", textAlign: "center" }}
                >
                  <ReadOnlyQuill
                    delta={item.content}
                    quillClass="read-only-quill"
                  />
                  {/* {item.content} */}
                </TableCell>
                <TableCell
                  sx={{ ...ellipsisStyle, width: "30%", textAlign: "center" }}
                >
                  <img
                    style={{
                      width: "100%",
                      minHeight: "5rem",
                      minWidth: "6rem",
                    }}
                    src={`${process.env.REACT_APP_BACKEND_URL}storage/blog/${item.image}`}
                    alt=""
                  />
                </TableCell>
                <TableCell
                  sx={{ ...ellipsisStyle, width: "30%", textAlign: "center" }}
                >
                  {item?.video && (
                    <video
                      style={{
                        width: "100%",
                        minHeight: "5rem",
                        minWidth: "8rem",
                      }}
                      controls
                      autoPlay={false}
                      src={`${process.env.REACT_APP_BACKEND_URL}storage/blog/${item.video}`}
                      alt="uploadVideo"
                    />
                  )}{" "}
                  {item?.youtube_url && (
                    <video
                      controls
                      autoPlay={false}
                      style={{ width: "10rem" }}
                      src={`${item.video}`}
                      alt="uploadVideo"
                    />
                  )}
                </TableCell>
                <TableCell sx={{ ...ellipsisStyle, width: "40%" }}>
                  <Box
                    sx={{
                      display: "flex",
                      justifyContent: "center",
                    }}
                  >
                    <Link to={`edit/${item.id}`}>
                      <Button
                        variant="contained"
                        size="small"
                        sx={{
                          mr: 3,
                          bgcolor: "#2196f3",
                          "&:hover": {
                            bgcolor: "white",
                          },
                        }}
                      >
                        <SaveAsIcon sx={{ color: "#000" }}></SaveAsIcon>
                      </Button>
                    </Link>
                    <Button
                      variant="contained"
                      size="small"
                      sx={{
                        bgcolor: "#ff3d00",
                        "&:hover": {
                          bgcolor: "white",
                        },
                      }}
                      onClick={(e) => confirmDeletePost(e, item.id)}
                    >
                      <DeleteIcon sx={{ color: "#000" }}></DeleteIcon>
                    </Button>
                  </Box>
                </TableCell>
              </TableRow>
            );
          })
        );
      }
    }
  }, [blogList, blogListStatus]);

  return (
    <>
      <ReusableList
        title="Material Download"
        path="path"
        category=""
        searchUrl=""
        list="Material Download"
        deleteUrl="delete"
        table="table"
        fetchAsync={FetchBlogAsync}
        postHtmlTable={postHtmlTable}
      />
    </>
  );
}

export default MaterialDownloadList;
